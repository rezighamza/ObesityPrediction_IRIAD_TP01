participant "ClientService<meta class="client.ClientService"></meta>" as client.ClientService
participant "Helpers<meta class="client.Helpers"></meta>" as client.Helpers
participant "ServeurService (InterfaceRMI)<meta class="server.ServeurService"></meta>" as server.ServeurService

autoactivation
autonumber
messagestyle <wordwrap:50>

client.ClientService->client.Helpers:inputPatientFromConsole()<meta ref="client.ClientService:6517" class="client.Helpers" method="inputPatientFromConsole" argTypes=""></meta>
loop true
alt input.equals("1")
box over client.Helpers: break<meta ref="client.Helpers:496"></meta>
else input.equals("2")
box over client.Helpers: break<meta ref="client.Helpers:598"></meta>
end
end
client.Helpers->client.Helpers:getIntInput(sc, "Âge (en années, ex: 25): ", 0, 120)<meta ref="client.Helpers:785" class="client.Helpers" method="getIntInput" argTypes="java.util.Scanner,java.lang.String,int,int"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : int<meta ref="client.Helpers:3049"></meta>
end
end
client.Helpers->client.Helpers:getDoubleInput(sc, "Taille (en mètres, ex: 1.75):..., 0.5, 2.5)<meta ref="client.Helpers:882" class="client.Helpers" method="getDoubleInput" argTypes="java.util.Scanner,java.lang.String,double,double"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : double<meta ref="client.Helpers:3695"></meta>
end
end
client.Helpers->client.Helpers:getDoubleInput(sc, "Poids (en kg, ex: 70): ", 10, 300)<meta ref="client.Helpers:989" class="client.Helpers" method="getDoubleInput" argTypes="java.util.Scanner,java.lang.String,double,double"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : double<meta ref="client.Helpers:3695"></meta>
end
end
client.Helpers->client.Helpers:getYesNoInput(sc, "Antécédents familiaux d'obési...)<meta ref="client.Helpers:1103" class="client.Helpers" method="getYesNoInput" argTypes="java.util.Scanner,java.lang.String"></meta>
loop true
alt input.equals("yes") || input.equals("no")
client.Helpers<--client.Helpers:input : String<meta ref="client.Helpers:4304"></meta>
end
end
client.Helpers->client.Helpers:getYesNoInput(sc, "Consommation fréquente d'alim...)<meta ref="client.Helpers:1208" class="client.Helpers" method="getYesNoInput" argTypes="java.util.Scanner,java.lang.String"></meta>
loop true
alt input.equals("yes") || input.equals("no")
client.Helpers<--client.Helpers:input : String<meta ref="client.Helpers:4304"></meta>
end
end
client.Helpers->client.Helpers:getIntInput(sc, "Fréquence de consommation de ..., 1, 3)<meta ref="client.Helpers:1331" class="client.Helpers" method="getIntInput" argTypes="java.util.Scanner,java.lang.String,int,int"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : int<meta ref="client.Helpers:3049"></meta>
end
end
client.Helpers->client.Helpers:getIntInput(sc, "Nombre de repas principaux pa..., 1, 4)<meta ref="client.Helpers:1456" class="client.Helpers" method="getIntInput" argTypes="java.util.Scanner,java.lang.String,int,int"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : int<meta ref="client.Helpers:3049"></meta>
end
end
client.Helpers->client.Helpers:getChoiceInput(sc, "Consommation entre les repas", new String[]{"never", "sometim...)<meta ref="client.Helpers:1565" class="client.Helpers" method="getChoiceInput" argTypes="java.util.Scanner,java.lang.String,java.lang.String[]"></meta>
loop true
loop for each String choice
alt input.equalsIgnoreCase(choice)
client.Helpers<--client.Helpers:choice : String<meta ref="client.Helpers:4943"></meta>
end
end
end
client.Helpers->client.Helpers:getYesNoInput(sc, "Fumez-vous? (yes/no): ")<meta ref="client.Helpers:1718" class="client.Helpers" method="getYesNoInput" argTypes="java.util.Scanner,java.lang.String"></meta>
loop true
alt input.equals("yes") || input.equals("no")
client.Helpers<--client.Helpers:input : String<meta ref="client.Helpers:4304"></meta>
end
end
client.Helpers->client.Helpers:getDoubleInput(sc, "Consommation d'eau quotidienn..., 0, 10)<meta ref="client.Helpers:1802" class="client.Helpers" method="getDoubleInput" argTypes="java.util.Scanner,java.lang.String,double,double"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : double<meta ref="client.Helpers:3695"></meta>
end
end
client.Helpers->client.Helpers:getYesNoInput(sc, "Surveillez-vous les calories ...)<meta ref="client.Helpers:1923" class="client.Helpers" method="getYesNoInput" argTypes="java.util.Scanner,java.lang.String"></meta>
loop true
alt input.equals("yes") || input.equals("no")
client.Helpers<--client.Helpers:input : String<meta ref="client.Helpers:4304"></meta>
end
end
client.Helpers->client.Helpers:getIntInput(sc, "Activité physique hebdomadair..., 0, 24)<meta ref="client.Helpers:2031" class="client.Helpers" method="getIntInput" argTypes="java.util.Scanner,java.lang.String,int,int"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : int<meta ref="client.Helpers:3049"></meta>
end
end
client.Helpers->client.Helpers:getIntInput(sc, "Temps quotidien devant un écr..., 0, 24)<meta ref="client.Helpers:2146" class="client.Helpers" method="getIntInput" argTypes="java.util.Scanner,java.lang.String,int,int"></meta>
loop true
alt value >= min && value <= max
client.Helpers<--client.Helpers:value : int<meta ref="client.Helpers:3049"></meta>
end
end
client.Helpers->client.Helpers:getChoiceInput(sc, "Fréquence de consommation d'a..., new String[]{"never", "sometim...)<meta ref="client.Helpers:2265" class="client.Helpers" method="getChoiceInput" argTypes="java.util.Scanner,java.lang.String,java.lang.String[]"></meta>
loop true
loop for each String choice
alt input.equalsIgnoreCase(choice)
client.Helpers<--client.Helpers:choice : String<meta ref="client.Helpers:4943"></meta>
end
end
end
client.Helpers->client.Helpers:getChoiceInput(sc, "Moyen de transport", new String[]{"Walking", "Bike"...)<meta ref="client.Helpers:2426" class="client.Helpers" method="getChoiceInput" argTypes="java.util.Scanner,java.lang.String,java.lang.String[]"></meta>
loop true
loop for each String choice
alt input.equalsIgnoreCase(choice)
client.Helpers<--client.Helpers:choice : String<meta ref="client.Helpers:4943"></meta>
end
end
end
client.ClientService<--client.Helpers:new Patient(gender, age, height, weight, familyHistory, favc, fcvc, ncp, caec, smoke, ch2o, scc, faf, tue, calc, mtrans, "") : Patient<meta ref="client.Helpers:2602"></meta>
client.ClientService->server.ServeurService:modifyPatient(clientID, num, p)<meta ref="client.ClientService:6582" class="server.ServeurService" method="modifyPatient" argTypes="java.lang.String,int,common.Patient"></meta>
alt patientMap.containsKey(key)
client.ClientService<--server.ServeurService:"Patient " + key + " modifié." : String<meta ref="server.ServeurService:3886"></meta>
else
client.ClientService<--server.ServeurService:"Aucun patient trouvé avec l'ID: " + key : String<meta ref="server.ServeurService:3954"></meta>
end
